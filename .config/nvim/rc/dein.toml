[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = 'source ~/.config/nvim/rc/plugins/lightline.rc.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_faster = 1
  let g:indentLine_enabled = 1
'''
[[plugins]]
repo = 'KeitaNakamura/neodark.vim'
depends = 'itchyny/lightline.vim'
hook_add = '''
  let g:neodark#use_256color = 0
  let g:lightline.colorscheme = 'neodark'
  let g:neodark#use_custom_terminal_theme = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


##########################################
# syntax
##########################################
#{{{
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'html5', 'php', 'xml', 'css']
[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'html5', 'php', 'xml', 'css']

# Python
[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'


[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = 'python'

[[plugins]]
repo = 'vim-python/python-syntax'
on_ft = 'python'
hook_add = '''
let g:python_highlight_all = 1
'''

[[plugins]]
repo = 'zaiste/tmux.vim'
on_ft = 'tmux'

[[plugins]]
repo = 'smancill/conky-syntax.vim'
on_ft = '*.conkyrc'

[[plugins]]
repo = 'vim-jp/vim-cpp'
on_ft = 'cpp'

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
on_ft = 'cpp'
hook_add = '''
  let g:cpp_class_decl_highlight = 1
  let g:cpp_class_scope_highlight = 1
  let g:cpp_experimental_template_highlight = 1
  let g:cpp_concepts_highlight = 1

'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'jelera/vim-javascript-syntax'

[[plugins]]
repo = 'zplug/vim-zplug'

[[plugins]]
repo = 'dearrrfish/vim-applescript'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']
hook_add = '''
setlocal iskeyword+=$
setlocal iskeyword+=-
'''

#}}}



[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'Shougo/context_filetype.vim'


[[plugins]]
repo = 'thinca/vim-template'
hook_add =  '''
    autocmd MyAutoCmd User plugin-template-loaded call s:template_keywords()
    function! s:template_keywords()
        silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
        silent! %s/<+FILENAME+>/\=expand('%:t:r')/g
        silent! %s/<+GUARD+>/\=toupper(expand("%:t:r"))/g
    endfunction
    autocmd MyAutoCmd User plugin-template-loaded
        \   if search('<+CURSOR+>')
        \ |    silent! execute 'normal! "_da>'
        \ | endif
'''

[[plugins]]
repo = 'mattn/emoji-vim'

#[[plugins]]
#repo = 'kana/vim-submode'
#hook_add = 'source ~/.config/nvim/rc/plugins/submode.rc.vim'

[[plugins]]
repo = 'osyo-manga/vim-brightest'
hook_add = '''
let g:brightest#enable_on_CursorHold = 1
'''

[[plugins]]
repo = "w0rp/ale"
hook_add = '''
" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 0

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 0
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストとQuickFixには表示しない
" 出てると結構うざいしQuickFixを書き換えられるのは困る
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" 有効にするlinter
let g:ale_linters = {
\   'python': ['flake8', 'mypy'],
\   'go': ['gofmt'],
\   'cpp': ['clang', 'clangtidy'],
\}

let g:ale_python_mypy_options = join([
      \ "--fast-parser",
      \ "--strict-optional",
      \ "--disallow-untyped-defs",
      \ "--disallow-untyped-calls",
      \ "--ignore-missing-imports"], " ")

let g:ale_cpp_clang_options = '-std=c++11 -Wall -I./include'
let g:ale_cpp_clangtidy_options = '-I./include'
let g:ale_c_clang_options = '-std=c11 -Wall -I./include'
let g:ale_c_clangtidy_options = '-I./include'

" ALE用プレフィックス
" エラー行にジャンプ
nmap [ale] <Nop>
map <Leader>a [ale]
nmap <silent> [ale]p <Plug>(ale_previous)
nmap <silent> [ale]n <Plug>(ale_next)
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['itchyny/lightline.vim', 'w0rp/ale']
hook_add = '''
  let g:lightline.component_expand= {
        \ 'linter_warning': 'lightline#ale#warnings',
        \ 'linter_errors': 'lightline#ale#errors',
        \ 'linter_ok': 'lightline#ale#ok',
        \ }
  let g:lightline.component_type = {
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ }
'''

[[plugins]]  # for denite-git
repo = 'neoclide/vim-easygit'
hook_add = '''
  let g:easygit_enable_command = 1
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_map_keys = 0
let g:gitgutter_grep_command = 'rg'
set updatetime=5000
'''

[[plugins]]
repo = 'rizzatti/dash.vim'
on_map = [['n', '<Plug>']]
hook_add = '''
  nmap <silent> <leader>d <Plug>DashSearch
'''

[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
let g:winresizer_start_key = '<C-e>'
'''

# [[plugins]]
# repo = 'edkolev/tmuxline.vim'
# hook_source = '''
# let g:tmuxline_preset = {
#       \'a'    : '#S',
#       \'c'    : ['#(whoami)'],
#       \'win'  : ['#I', '#W'],
#       \'cwin' : ['#I', '#W', '#F'],
#       \'x'    : ['#{battery_percentage} #{battery_icon}', '#{cpu_percentage} #{cpu_icon}'],
#       \'y'    : ['#(date)', '#(ansiweather -l sapporo -w false -h false -p false -a false -s true | cut -d " " -f6,7,8)'],
#       \'z'    : '#H'}
# let g:tmuxline_theme = 'lightline'
# '''

