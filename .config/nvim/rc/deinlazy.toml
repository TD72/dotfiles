[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_if = 1
on_source = 'denite.nvim'


[[plugins]]
repo = 'neoclide/denite-git'
on_if = 1
depends = 'vim-easygit'


[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = '''
  source ~/.config/nvim/rc/plugins/denite.rc.vim
'''
hook_add = '''
  nnoremap [denite] <Nop>
  nmap <Leader> [denite]

  " open file
  nnoremap [denite]o
        \ :<C-u>Denite buffer file/point file/old
        \ -sorters=sorter/rank
        \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`
        \ file file:new<CR>

  nnoremap <silent> [denite]]
        \ :<C-u>Denite ghq -default-action=cd<CR>

  nnoremap [denite]b
        \ :<C-u>Denite buffer<CR>

  " search
  nnoremap <silent> *
        \ :<C-u>DeniteCursorWord -buffer-name=search
        \ -auto-highlight line -mode=normal<CR>

  nnoremap <silent> /
        \ :<C-u>Denite -buffer-name=search
        \ -auto-highlight line<CR>

  nnoremap <silent> n
        \ :<C-u>Denite -buffer-name=search
        \ -resume -mode=normal -refresh<CR>

  " grep
  nnoremap [denite]r 
        \ :<C-u>Denite -buffer-name=search -resume grep<CR>

  nnoremap [denite]n 
        \ :<C-u>Denite -buffer-name=search -resume
        \ -select=+1 -immediately<CR>

  nnoremap [denite]N 
        \ :<C-u>Denite -buffer-name=search -resume
        \ -select=-1 -immediately<CR>

  " paste
  nnoremap <silent> [denite][ 
        \ :<C-u>Denite -buffer-name=register register neoyank<CR>
  xnoremap <silent> [denite][ 
        \ :<C-u>Denite -default-action=replace
        \ -buffer-name=register register neoyank<CR>

  nnoremap <silent> <C-t> 
        \ :<C-u>Denite -select=`tabpagenr()-1` -mode=normal deol<CR>
  nnoremap <silent> <C-k>
        \ :<C-u>Denite -mode=normal change jump<CR>
  nnoremap <silent> [denite];
        \ :<C-u>Denite command command_history<CR>

  " Git
  nnoremap <silent> [denite]gl
        \ :<C-u>Denite -mode=normal gitlog<CR>
  nnoremap <silent> [denite]gla
        \ :<C-u>Denite -mode=normal gitlog:all<CR>
  nnoremap <silent> [denite]gs
        \ :<C-u>Denite -mode=normal gitstatus<CR>
  nnoremap <silent> [denite]gd
        \ :<C-u>Denite -mode=normal gitchanged<CR>

  " filetype
  nnoremap <silent> <Leader>f
        \ :<C-u>Denite filetype<CR>

  nnoremap <silent><expr> tt &filetype == 'help' ?  "g\<C-]>" :
        \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
        \  tag:include\<CR>"
  
  nnoremap <silent><expr> tp  &filetype == 'help' ?
        \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal jump\<CR>"
  

  " nnoremap [denite]m :<C-u>Denite unite:output<CR>
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
hook_add = '''
  nnoremap <silent> N :<C-u>call deol#new({'command': 'zsh'})<CR>
  nnoremap <silent> <Leader>s :<C-u>Deol zsh<CR>
'''
hook_source = '''
  let g:deol#prompt_pattern = '% \|%$'
  set shell=zsh
  " Set to $PATH.
  function! s:split_envpath(path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction"}}}
  function! s:join_envpath(list, orig_path, add_path) abort "{{{
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction"}}}
  autocmd FileType deol call s:on_deol()
  function! s:on_deol() abort
    " tnoremap <buffer><silent> <C-p> <Plug>(deol_previous_prompt)
    " tnoremap <buffer><silent> <C-n> <Plug>(deol_next_prompt)
    nnoremap <buffer><silent> <Leader>gc :<C-u>call deol#send('git commit')<CR>
    nnoremap <buffer><silent> <Leader>gA :<C-u>call deol#send('git commit --amend')<CR>
  endfunction
'''


[[plugins]]
repo = 'Shougo/junkfile.vim'
on_source = 'denite.nvim'
hook_add = '''
  let g:junkfile#directory = '~/.memo'
  nnoremap <silent> <Leader>j :<C-u>Denite junkfile:new junkfile<CR>
'''

#[[plugins]]
#repo = 'thinca/vim-quickrun'
#on_map = '<Plug>'
#hook_add = 'nmap <Leader>q <Plug>(quickrun)'
#hook_source = 'source ~/.config/nvim/rc/plugins/vim-quickrun.rc.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'
hook_add = '''
    nnoremap <silent> <Leader>t :TagbarToggle<CR>
    let g:tagbar_width=40
'''

[[plugins]]
repo = 'wesleyche/SrcExpl'
on_cmd = 'SrcExplToggle'
hook_add = '''
    nnoremap [srce] <Nop>
    nmap <Leader>, [srce]
    nnoremap [srce] :SrcExplToggle<CR>
'''
hook_source = 'source ~/.config/nvim/rc/plugins/SrcExpl.rc.vim'

[[plugins]]
repo = 'tyru/caw.vim'
on_map = [['nx', '<Plug>']]
hook_add = '''
  function! InitCaw() abort
    if !&l:modifiable
      silent! nunmap <buffer> <Leader>c
      silent! xunmap <buffer> <Leader>c
      " silent! nunmap <buffer> gcc
      " silent! xunmap <buffer> gcc
    else
      " nmap <buffer> gc <Plug>(caw:prefix)
      " xmap <buffer> gc <Plug>(caw:prefix)
      nmap <buffer> <Leader>c <Plug>(caw:hatpos:toggle)
      xmap <buffer> <Leader>c <Plug>(caw:hatpos:toggle)
    endif
  endfunction
  autocmd MyAutoCmd FileType * call InitCaw()
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <silent><C-k> <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-k> <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-k> <Plug>(neosnippet_expand_target)

  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_complete_done = 1
  let g:neosnippet#expand_word_boundary = 1
  " let g:neosnippet#snippets_directory = '~/.vim/snippets'
'''

[[plugins]]
repo = 'ujihisa/neco-look'
on_i = 1

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
on_i = 1

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_i = 1

[[plugins]]
repo = 'Shougo/echodoc'
on_event = 'CompleteDone'
hook_source = '''
"let g:echodoc#type = 'signature'
  call echodoc#enable()
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = [['x', '<Plug>']]
hook_add = '''
    xmap I <Plug>(niceblock-I)
    xmap A <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kana/vim-tabpagecd'
on_source = 'unite.vim'

[[plugins]]
repo = 'tyru/eskk.vim'
on_map = {ic = '<Plug>'}
hook_add = '''
  imap <C-j> <Plug>(eskk:toggle)
  cmap <C-j> <Plug>(eskk:toggle)
'''
hook_source = 'source ~/.config/nvim/rc/plugins/eskk.rc.vim'

[[plugins]]
repo = 'thinca/vim-ref'
on_map = '<Plug>'
hook_add = '''
    nnoremap ,j :<C-u>Ref webdict je<Space>
    nnoremap ,e :<C-u>Ref webdict ej<Space>
'''
hook_source = 'source ~/.config/nvim/rc/plugins/ref.rc.vim'


[[plugins]]
repo = 'saihoooooooo/glowshi-ft.vim'
on_map = [['nx', '<Plug>']]
hook_add = '''
    let g:glowshi_ft_no_default_keymappings = 1
    nmap f <Plug>(glowshi-ft-f)
    xmap f <Plug>(glowshi-ft-f)
    nmap F <Plug>(glowshi-ft-F)
    xmap F <Plug>(glowshi-ft-F)

    let g:glowshi_ft_timeoutlen = 1000
'''

[[plugins]]
repo = 'yuratomo/w3m.vim'
hook_add = '''
    nnoremap <Leader>w :W3m<Space>
    nnoremap <Leader>W :<C-u>W3m<Space><C-r>+
'''


[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = [['n', '<Plug>']]


[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
hook_add = '''
  let g:previm_open_cmd = 'open'
'''

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = [['n', '<Plug>']]
hook_add = '''
    nmap <silent>j <Plug>(accelerated_jk_gj)
    nmap <silent>k <Plug>(accelerated_jk_gk)
'''

# [[plugins]]
# repo = 'lambdalisue/vim-gita'
# hook_add = '''
#     nnoremap <silent> <Leader>gs :<C-u>Gita status<CR>
#     nnoremap <silent> <Leader>gc :<C-u>Gita commit<CR>
#     nnoremap <silent> <Leader>ga :<C-u>Gita commit --amend<CR>
#     nnoremap <silent> <Leader>gd :<C-u>Gita diff<CR>
#     nnoremap <silent> <Leader>gb :<C-u>Gita browse<CR>
#     nnoremap <silent> <Leader>gl :<C-u>Gita blame<CR>
#
#     autocmd FileType gita-status
#     \ nmap <buffer> cc <Plug>(gita-commit-open) |
#     \ nmap <buffer> cA <Plug>(gita-commit-open-amend)
#
#     let git#features#commit#enable_default_mappings = 0
# '''

[[plugins]]
repo = 'mattn/emmet-vim'
on_map = [['n', '<Plug>']]
on_ft = ['html', 'html5', 'php', 'xml', 'css']
hook_add = '''
    let g:user_emmet_leader_key = '<C-y>'
    let g:user_emmet_setting = {
                \	'variable': {
                \	'lang': "ja"
                \	},
                \	'indentation': '    '
                \}
'''

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = 'Codic'
on_source = 'unite-codic.vim'

[[plugins]]
repo = 'rhysd/unite-codic.vim'
depends = ['unite.vim', 'codic-vim']

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    nmap <silent>ys <Plug>(operator-surround-append)a
    nmap <silent>ds <Plug>(operator-surround-delete)a
    nmap <silent>cs <Plug>(operator-surround-replace)a
'''

[[plugins]] # e
repo = 'kana/vim-textobj-entire'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>ae <Plug>(textobj-entire-a)
    omap <silent>ie <Plug>(textobj-entire-i)
    vmap <silent>ae <Plug>(textobj-entire-a)
    vmap <silent>ie <Plug>(textobj-entire-i)
'''

[[plugins]] # /
repo = 'kana/vim-textobj-lastpat'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>a/ <Plug>(textobj-lastpat-n)
    omap <silent>i/ <Plug>(textobj-lastpat-n)
    omap <silent>a? <Plug>(textobj-lastpat-N)
    omap <silent>i? <Plug>(textobj-lastpat-N)
    vmap <silent>a/ <Plug>(textobj-lastpat-n)
    vmap <silent>i/ <Plug>(textobj-lastpat-n)
    vmap <silent>a? <Plug>(textobj-lastpat-N)
    vmap <silent>i? <Plug>(textobj-lastpat-N)
'''

[[plugins]] # l
repo = 'kana/vim-textobj-indent'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>al <Plug>(textobj-indent-a)
    omap <silent>il <Plug>(textobj-indent-i)
    vmap <silent>al <Plug>(textobj-indent-a)
    vmap <silent>il <Plug>(textobj-indent-i)
'''

[[plugins]] # z
repo = 'kana/vim-textobj-fold'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>az <Plug>(textobj-fold-a)
    omap <silent>iz <Plug>(textobj-fold-i)
    vmap <silent>az <Plug>(textobj-fold-a)
    vmap <silent>iz <Plug>(textobj-fold-i)
'''

[[plugins]] # p
repo = 'gilligan/textobj-lastpaste'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>ap <Plug>(textobj-lastpaste-a)
    omap <silent>ip <Plug>(textobj-lastpaste-i)
    vmap <silent>ap <Plug>(textobj-lastpaste-a)
    vmap <silent>ip <Plug>(textobj-lastpaste-i)
'''

[[plugins]] # u
repo = 'mattn/vim-textobj-url'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>au <Plug>(textobj-url-a)
    omap <silent>iu <Plug>(textobj-url-i)
    vmap <silent>au <Plug>(textobj-url-a)
    vmap <silent>iu <Plug>(textobj-url-i)
'''

[[plugins]] # db
repo = 'kana/vim-textobj-django-template'
depends = 'vim-operator-user'
on_ft = 'python'
on_map = '<Plug>'
hook_add = '''
    omap <silent>adb <Plug>(textobj-django-template-a)
    omap <silent>idb <Plug>(textobj-django-template-i)
    vmap <silent>adb <Plug>(textobj-django-template-a)
    vmap <silent>idb <Plug>(textobj-django-template-i)
'''

[[plugins]] # e
repo = 'rbonvall/vim-textobj-latex'
depends = 'vim-operator-user'
on_ft = 'latex'
on_map = '<Plug>'
hook_add = '''
    omap <silent>ala <Plug>(textobj-latex-a)
    omap <silent>ila <Plug>(textobj-latex-i)
    vmap <silent>ala <Plug>(textobj-latex-a)
    vmap <silent>ila <Plug>(textobj-latex-i)
'''

[[plugins]] # _
repo = 'kana/vim-textobj-syntax'
depends = 'vim-operator-user'
on_map = '<Plug>'
hook_add = '''
    omap <silent>ay <Plug>(textobj-syntax-a)
    omap <silent>iy <Plug>(textobj-syntax-i)
    vmap <silent>ay <Plug>(textobj-syntax-a)
    vmap <silent>iy <Plug>(textobj-syntax-i)
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
    let g:go#use_vimproc = 1
    let g:go_autodetect_gopath = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_types = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_command = "goimports"

    let g:go_def_mapping_enabled = 1

    " let g:go_bin_path = $GOPATH."/bin"

   
    nnoremap [go] <Nop>
    nmap <Leader>o [go]
    nnoremap [go]d <Plug>(go-doc)
    nnoremap [go]db <Plug>(go-doc-browser)
   
'''

# [[plugins]]
# repo = 'zchee/nvim-go'
# build = 'make'

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_source = '''
    let g:vimtex_view_general_viewer
          \ = '/Applications/Skim.app/Contents/SharedSupport/displayline'
    let g:vimtex_view_general_options = '-r @line @pdf @tex'

    " This adds a callback hook that updates Skim after compilation
    let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
    function! UpdateSkim(status)
      if !a:status | return | endif

      let l:out = b:vimtex.out()
      let l:tex = expand('%:p')
      let l:cmd = [g:vimtex_view_general_viewer, '-r']
      if !empty(system('pgrep Skim'))
        call extend(l:cmd, ['-g'])
      endif
      if has('nvim')
        call jobstart(l:cmd + [line('.'), l:out, l:tex])
      elseif has('job')
        call job_start(l:cmd + [line('.'), l:out, l:tex])
      else
        call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
      endif
endfunction
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
  let g:rustfmt_autosave = 1
  let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
let g:racer_cmd = '$HOME/.cargo/bin/racer'
let $RUST_SRC_PATH = expand('~/.rustup/toolschains/'
      \ .'/usr/local/src/rust/src/')
'''

[[plugins]]
repo = 'rbtnn/game_engine.vim'

[[plugins]]
repo = 'rbtnn/mario.vim'
on_cmd = 'Mario'
depends = 'game_engine.vim'

[[plugins]]
repo = 'itchyny/vim-highlighturl'
on_ft = ['html', 'html5', 'php', 'xml', 'css', 'htmldjango', 'md']

[[plugins]]
repo = 'lambdalisue/vim-findent'

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_path = 'suda://'

[[plugins]]
repo = 'aliva/vim-fish'
on_ft = ['fish']


[[plugins]]
repo = "HerringtonDarkholme/yats.vim"
on_ft = ['typescript']


#[[plugins]]
#repo = 'kana/vim-smartchr'
#on_event = 'InsertCharPre'
#hook_source = '''
#  inoremap <expr> , smartchr#one_of(', ', ',')
#  inoremap <expr> =
#        \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
#        \ : search('\(*\<bar>!\)\%#', 'bcn') ? '= '
#        \ : smartchr#one_of(' = ', '=', ' == ', ' === ')
#  autocmd MyAutoCmd FileType c,cpp inoremap <buffer> <expr> .
#        \ smartchr#loop('.', '->', '...')
#
#'''

[[plugins]]
repo = 'Shougo/deoplete-clangx'
on_ft = ['c', 'cpp']


[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_i = 1
on_ft = 'go'
hook_source = '''
  " Path to python interpreter for neovim
  " Skip the check of neovim module
  let g:python3_host_skip_check = 1
  let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
  let g:deoplete#sources#go#sort_class =
        \ ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#use_cache = 1
  if has('mac')
    let g:deoplete#sources#go#json_directory = expand('~/.cache/deoplete/go/darwin_amd64')
    let g:deoplete#sources#go#cgo#libclang_path = '/usr/local/Cellar/llvm/5.0.0/lib/libclang.dylib'
  else
    let g:deoplete#sources#go#json_directory = expand('~/.cache/deoplete/go/linux_amd64')
    let g:deoplete#sources#go#cgo#libclang_path = '/usr/lib/libclang.so'
  endif

  let g:deoplete#sources#go#cgo = 1
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
on_i = 1
hook_source = '''
  let g:deoplete#sources#rust#racer_binary='$HOME/.cargo/bin/racer'
  let g:deoplete#sources#rust#rust_source_path='/usr/local/src/rust/src'
  let g:deoplete#sources#rust#disable_keymap=1
'''

[[plugins]]
repo = 'fszymanski/deoplete-emoji'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
source ~/.config/nvim/rc/plugins/deoplete.rc.vim
call deoplete#enable() 
'''

[[plugins]]
repo = 'tweekmonster/impsort.vim'
on_ft = 'python'
hook_add = '''
let g:impsort_highlight_imported = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['toml', 'markdown']
hook_add = '''

autocmd MyAutoCmd User PreciousFileType IndentLinesReset
let g:precious_enable_switchers = {
      \   "*" : {
      \       "outer_region" : 0
      \   }
      \}
" NORMALモードのカーソル移動中に頻繁に切り替わるとうざいのでデフォは無効化しておく(helpは例外)
let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
" INSERTモードのON／OFFに合わせてトグル
autocmd MyAutoCmd InsertEnter * :PreciousSwitch
autocmd MyAutoCmd InsertLeave * :PreciousReset
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
on_ft = ['python', 'vue', 'javascript', 'typescript', 'bash', 'zsh']
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
      \ 'vue': ['vls'],
      \ 'html': [],
      \ 'css': [],
      \ 'javasript': ['javascript-typescript-stdio'],
      \ 'typescript': ['javascript-typescript-stdio'],
      \ 'python': ['pyls'],
      \ 'bash': ['bash-language-server', 'start'],
      \ 'zsh': ['bash-language-server', 'start'],
      \ }

nnoremap [lc] <Nop>
nmap <Leader>l [lc]
nnoremap <silent> [lc]h :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> [lc]d :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> [lc]r :call LanguageClient#textDocument_rename()<CR>
nnoremap <silent> [lc]f :call LanguageClient#textDocument_formatting()<CR>
'''


[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_map = [['n', '<Plug>']]
hook_add = '''
map y <Plug>(highlightedyank)
let g:highlightedyank_highlight_duration = 1000
'''


[[plugins]]
repo = 'lilydjwg/colorizer'
on_ft = ['html', 'css', 'vim', 'tmux', 'zsh']


# MarkDown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft = 'markdown'

[[plugins]]
repo = 'plasticboy/vim-markdown'
depends = 'tabular'
on_ft = 'markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_no_default_keymappings = 1
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_emphasis_multiline = 0
let g:vim_markdown_math = 1
let g:vim_markdown_conceal = 0
'''


[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = "Defx"
hook_add = '''
nnoremap <silent> <Leader>e :Defx<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> e
        \ defx#do_action('open', 'split')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
endfunction
'''

